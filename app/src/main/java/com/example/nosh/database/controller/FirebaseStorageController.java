package com.example.nosh.database.controller;

import android.content.Context;
import android.net.Uri;
import android.util.Log;

import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;

import java.util.Observable;

import javax.inject.Inject;


/**
 * This class is responsible for managing CRUD operation on a user folder
 * in Firebase Storage.
 * In Firebase Storage, each user will have a dedicated folder to store
 * recipe images. Each folder is named with user id generated by Firebase
 * Authentication
 *
 * |-root
 *  |-- usr_id_1
 *    |-- ...
 *  |-- usr_id_2
 *    |-- ...
 * @authors Dekr0
 * @version 1.0
 */
public class FirebaseStorageController extends Observable {

    // StorageReference of a user folder
    private final StorageReference rootRef;

    @Inject
    public FirebaseStorageController(StorageReference ref) {
        this.rootRef = ref;
    }

    /**
     * Upload a local image to Firebase Storage.
     * @param image
     * @return StorageReference to a image in Firebase Storage (Remote)
     */
    public StorageReference add(Uri image) {

        StorageReference ref = rootRef.child(image.getLastPathSegment());

        UploadTask uploadTask = ref.putFile(image);

        uploadTask
                .addOnSuccessListener(
                taskSnapshot ->
                        Log.d("Upload Image", "Upload successfully")
        )
                .addOnFailureListener(
                        e ->
                                Log.w("Upload Image", e)
                );

        return ref;
    }

    /**
     * Get all StorageReference of recipe images in Firebase storage for the
     * current user. Then, notify RecipeImageRepository to retrieve and store
     * those StorageReference in a HashMap
     */
    public void sync() {
        rootRef.listAll().addOnSuccessListener(listResult -> {
            Log.d("sync", "Sync successfully");

            StorageReference[] data = {};

            setChanged();

            notifyObservers(listResult.getItems().toArray(data));
        });
    }
}
